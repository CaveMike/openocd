#
# Copyright (c) 2016 Motorola Mobility LLC
#
# Common defines for the normal and reset MuC configurations for the Motorola
# mods development kit.
#
set HSB_SPI_FLASH_SZ        0x800000
set HSB_SPI_FLASH_SECTOR_SZ 0x1000

set GPIOA                   0x48000000
set GPIOB                   0x48000400
set GPIOC                   0x48000800
set GPIOD                   0x48000c00
set GPIOE                   0x48001000
set GPIOF                   0x48001400
set GPIOG                   0x48001800
set GPIOH                   0x48001c00
set GPIO_MODER_OFS          0x00
set GPIO_OTYPER_OFS         0x04
set GPIO_OSPEEDR_OFS        0x08
set GPIO_BSRR_OFS           0x18
set GPIOA_AFRL_OFS          0x20
set GPIOB_AFRH_OFS          0x24

set IWDG                    0x40003000
set SPI1                    0x40013000

set MUC_SPI_SEL_PORT        $GPIOC
set MUC_SPI_SEL_PIN         6
set HSB_PWR_EN_PORT         $GPIOG
set HSB_PWR_EN_PIN          14
set HSB_SPI_BOOT_N_PORT     $GPIOA
set HSB_SPI_BOOT_N_PIN      8
set HSB_WAKE_PORT           $GPIOB
set HSB_WAKE_PIN            8
set HSB_RESET_N_PORT        $GPIOH
set HSB_RESET_N_PIN         1

set MUC_SPI_PORT            $GPIOA
set MUC_SPI_CS_PIN          4
set MUC_SPI_CLK_PIN         5
set MUC_SPI_MISO_PIN        6
set MUC_SPI_MOSI_PIN        7
set MUC_SPI_ALT_FCN_SPI     5

#
# Use the lines below to connect to the STM32L476.
#
set WORKAREASIZE            0x2000
source [find target/stm32l4x.cfg]

#
# Setup the HSB SPI flash on SPI1 (0x40013000).  Please note to program this the
# switch to route SPI to it must be enabled using the provided script.
# MUC_SPI_SEL (PC6) is used for routing SPI1 to the HSB flash part.
# HSB_PWR_EN (PG15) is used to enable power to the HSB.
#
# Please note the chip select is controlled using GPIO due to not being able to
# get the hardware chip select logic to work.
#
#flash bank $_CHIPNAME.spiflash stm32spi 0 $HSB_SPI_FLASH_SZ 0 0 $_TARGETNAME $SPI1 $MUC_SPI_PORT $MUC_SPI_CS_PIN $IWDG

set GPIO_MODE_INPUT         0x0
set GPIO_MODE_OUTPUT        0x1
set GPIO_MODE_ALT           0x2
set GPIO_MODE_ANALOG        0x3
proc stm32_gpio_set_mode {port pin mode} {
    global GPIO_MODER_OFS

    mmw [expr ($port+$GPIO_MODER_OFS)] [expr ($mode<<($pin*2))] [expr (0x3<<($pin*2))]
}
add_usage_text stm32_gpio_set_mode "<port base address> <pin number> <mode>"
add_help_text  stm32_gpio_set_mode "Set the pin mode to: Input (0 - GPIO_MODE_INPUT), Output (1 - GPIO_MODE_OUTPUT), Alternate Usage (2 - GPIO_MODE_ALT), Analog (3 - GPIO_MODE_ANALOG)."

set GPIO_TYPE_PUSH_PULL     0
set GPIO_TYPE_OPEN_DRAIN    1
proc stm32_gpio_set_otype {port pin type} {
    global GPIO_TYPE_OPEN_DRAIN
    global GPIO_OTYPER_OFS

    if { $type != 0 } {
        set $type $GPIO_TYPE_OPEN_DRAIN
    }
    mmw [expr ($port+$GPIO_OTYPER_OFS)] [expr ($type<<$pin)] [expr (0x1<<$pin)]
}
add_usage_text stm32_gpio_set_otype "<port base address> <pin number> <type>"
add_help_text  stm32_gpio_set_otype "Set the output drive type to: Push Pull (0 - GPIO_TYPE_PUSH_PULL), Open Drain (1 - GPIO_TYPE_OPEN_DRAIN)."

set GPIO_SPEED_LOW          0
set GPIO_SPEED_MED          1
set GPIO_SPEED_HIGH         2
set GPIO_SPEED_VERY_HIGH    3
proc stm32_gpio_set_speed { port pin speed } {
    global GPIO_OSPEEDR_OFS

    mmw [expr ($port+$GPIO_OSPEEDR_OFS)] [expr ($speed<<($pin*2))] [expr (0x3<<($pin*2))]
}

set GPIO_LOW                0
set GPIO_HIGH               1
proc stm32_gpio_set_pin {port pin enable} {
    global GPIO_BSRR_OFS

    if { $enable != 0 } {
        set shift 0
    } else {
        set shift 16
    }
    mww [expr ($port+$GPIO_BSRR_OFS)] [expr ((1<<$pin)<<$shift)]
}
add_usage_text stm32_gpio_set_pin "<port base address> <pin> <0 | 1>"
add_help_text  stm32_gpio_set_pin "Set the pin output register to the provided value."

proc stm32_gpio_set_alt_fcn { port pin function } {
    global GPIOA_AFRL_OFS
    global GPIOA_AFRH_OFS

    set offset $GPIOA_AFRL_OFS;
    if { $pin > 7 } {
        set offset $GPIOA_AFRH_OFS
        incr pin -8
    }
    mmw [expr ($port+$offset)] [expr (($function&0xf)<<($pin*4))] [expr (0xf<<($pin*4))]
}
add_usage_text stm32_gpio_set_alt_fcn "<port base address> <pin> <fcn 0-15>"
add_help_text  stm32_gpio_set_alt_fcn "Set the alternate function for the provided port."

proc stm32l4_spi1_clk_enable { } {
    set STM32RCC_BASE              0x40021000
    set STM32RCC_APB2ENR_OFS       0x60
    set STM32RCC_APB2ERR_SPI1_EN   [expr (1<<12)]

    set STM32RCC_APB2SMENR_OFS     0x80
    set STM32RCC_APB2SMENR_SPI1_EN [expr (1<<12)]

    mmw [expr ($STM32RCC_BASE+$STM32RCC_APB2ENR_OFS)]   $STM32RCC_APB2ERR_SPI1_EN   $STM32RCC_APB2ERR_SPI1_EN
    mmw [expr ($STM32RCC_BASE+$STM32RCC_APB2SMENR_OFS)] $STM32RCC_APB2SMENR_SPI1_EN $STM32RCC_APB2SMENR_SPI1_EN
}
add_help_text stm32l4_spi1_clk_enable "Enable the SPI1 clock for STM32L4 series parts."

proc hsb_reset_assert { } {
    global HSB_RESET_N_PORT
    global HSB_RESET_N_PIN
    global GPIO_MODE_OUTPUT
    global GPIO_TYPE_PUSH_PULL
    global GPIO_LOW

    stm32_gpio_set_mode  $HSB_RESET_N_PORT $HSB_RESET_N_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $HSB_RESET_N_PORT $HSB_RESET_N_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $HSB_RESET_N_PORT $HSB_RESET_N_PIN $GPIO_LOW
}
add_help_text hsb_reset_assert "Assert the reset pin on the HSB."

proc hsb_reset_deassert { } {
    global HSB_RESET_N_PORT
    global HSB_RESET_N_PIN
    global GPIO_MODE_OUTPUT
    global GPIO_TYPE_PUSH_PULL
    global GPIO_HIGH

    stm32_gpio_set_mode  $HSB_RESET_N_PORT $HSB_RESET_N_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $HSB_RESET_N_PORT $HSB_RESET_N_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $HSB_RESET_N_PORT $HSB_RESET_N_PIN $GPIO_HIGH
}
add_help_text hsb_reset_deassert "Deassert the reset pin on the HSB."

proc hsb_pwr_on { } {
    global HSB_PWR_EN_PORT
    global HSB_PWR_EN_PIN
    global HSB_SPI_BOOT_N_PORT
    global HSB_SPI_BOOT_N_PIN
    global HSB_WAKE_PORT
    global HSB_WAKE_PIN
    global GPIO_MODE_OUTPUT
    global GPIO_TYPE_PUSH_PULL
    global GPIO_HIGH
    global GPIO_LOW

    hsb_reset_assert

    stm32_gpio_set_mode  $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_HIGH

    stm32_gpio_set_mode  $HSB_SPI_BOOT_N_PORT $HSB_SPI_BOOT_N_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $HSB_SPI_BOOT_N_PORT $HSB_SPI_BOOT_N_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $HSB_SPI_BOOT_N_PORT $HSB_SPI_BOOT_N_PIN $GPIO_LOW

    stm32_gpio_set_mode  $HSB_WAKE_PORT $HSB_WAKE_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $HSB_WAKE_PORT $HSB_WAKE_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $HSB_WAKE_PORT $HSB_WAKE_PIN $GPIO_HIGH

    hsb_reset_deassert
}
add_help_text hsb_pwr_on "Power up the HSB."

proc hsb_pwr_off { } {
    global HSB_PWR_EN_PORT
    global HSB_PWR_EN_PIN
    global HSB_SPI_BOOT_N_PORT
    global HSB_SPI_BOOT_N_PIN
    global HSB_WAKE_PORT
    global HSB_WAKE_PIN
    global GPIO_MODE_OUTPUT
    global GPIO_TYPE_PUSH_PULL
    global GPIO_HIGH
    global GPIO_LOW

    hsb_reset_assert

    stm32_gpio_set_mode  $HSB_WAKE_PORT $HSB_WAKE_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $HSB_WAKE_PORT $HSB_WAKE_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $HSB_WAKE_PORT $HSB_WAKE_PIN $GPIO_LOW

    stm32_gpio_set_mode  $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_LOW
}
add_help_text hsb_pwr_off "Power down the HSB."

proc hsb_flash_enable { } {
    global HSB_PWR_EN_PORT
    global HSB_PWR_EN_PIN
    global MUC_SPI_SEL_PORT
    global MUC_SPI_SEL_PIN
    global MUC_SPI_PORT
    global MUC_SPI_CS_PIN
    global MUC_SPI_CLK_PIN
    global MUC_SPI_MISO_PIN
    global MUC_SPI_MOSI_PIN
    global MUC_SPI_ALT_FCN_SPI
    global GPIO_MODE_OUTPUT
    global GPIO_MODE_ALT
    global GPIO_TYPE_PUSH_PULL
    global GPIO_SPEED_VERY_HIGH
    global GPIO_HIGH
    global GPIO_LOW

    # Power off the HSB, but leave the IO voltage on.
    hsb_pwr_off
    stm32_gpio_set_mode  $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $HSB_PWR_EN_PORT $HSB_PWR_EN_PIN $GPIO_HIGH

    # Make sure GPIO is setup correctly for SPI1 operation.
    stm32_gpio_set_mode    $MUC_SPI_PORT $MUC_SPI_CS_PIN   $GPIO_MODE_OUTPUT
    # Used the two lines below if the chip select is not manually controlled.
    #  stm32_gpio_set_mode    $MUC_SPI_PORT $MUC_SPI_CS_PIN   $GPIO_MODE_ALT
    #  stm32_gpio_set_alt_fcn $MUC_SPI_PORT $MUC_SPI_CS_PIN   $MUC_SPI_ALT_FCN_SPI
    stm32_gpio_set_otype   $MUC_SPI_PORT $MUC_SPI_CS_PIN   $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin     $MUC_SPI_PORT $MUC_SPI_CS_PIN   $GPIO_HIGH
    stm32_gpio_set_speed   $MUC_SPI_PORT $MUC_SPI_CS_PIN   $GPIO_SPEED_VERY_HIGH

    stm32_gpio_set_mode    $MUC_SPI_PORT $MUC_SPI_CLK_PIN  $GPIO_MODE_ALT
    stm32_gpio_set_alt_fcn $MUC_SPI_PORT $MUC_SPI_CLK_PIN  $MUC_SPI_ALT_FCN_SPI
    stm32_gpio_set_otype   $MUC_SPI_PORT $MUC_SPI_CLK_PIN  $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_speed   $MUC_SPI_PORT $MUC_SPI_CLK_PIN  $GPIO_SPEED_VERY_HIGH

    stm32_gpio_set_mode    $MUC_SPI_PORT $MUC_SPI_MISO_PIN $GPIO_MODE_ALT
    stm32_gpio_set_alt_fcn $MUC_SPI_PORT $MUC_SPI_MISO_PIN $MUC_SPI_ALT_FCN_SPI
    stm32_gpio_set_speed   $MUC_SPI_PORT $MUC_SPI_MISO_PIN $GPIO_SPEED_VERY_HIGH

    stm32_gpio_set_mode    $MUC_SPI_PORT $MUC_SPI_MOSI_PIN $GPIO_MODE_ALT
    stm32_gpio_set_alt_fcn $MUC_SPI_PORT $MUC_SPI_MOSI_PIN $MUC_SPI_ALT_FCN_SPI
    stm32_gpio_set_otype   $MUC_SPI_PORT $MUC_SPI_MOSI_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_speed   $MUC_SPI_PORT $MUC_SPI_MOSI_PIN $GPIO_SPEED_VERY_HIGH

    # Route SPI1 to the HSB SPI flash.
    stm32_gpio_set_mode  $MUC_SPI_SEL_PORT $MUC_SPI_SEL_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $MUC_SPI_SEL_PORT $MUC_SPI_SEL_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $MUC_SPI_SEL_PORT $MUC_SPI_SEL_PIN $GPIO_HIGH

    # Enable the SPI port
    stm32l4_spi1_clk_enable
}
add_help_text hsb_enable_flash "Enable the SPI interface to the HSB SPI flash.  This must be done before accessing the SPI flash.  Please note this will power down the HSB.  The function disable_hsb_flash will not power the HSB back up.  For this use hsb_pwr_on function."

proc hsb_flash_disable { } {
    global MUC_SPI_SEL_PORT
    global MUC_SPI_SEL_PIN
    global GPIO_MODE_OUTPUT
    global GPIO_TYPE_PUSH_PULL
    global GPIO_LOW

    # Do not route SPI1 to the HSB SPI flash
    stm32_gpio_set_mode  $MUC_SPI_SEL_PORT $MUC_SPI_SEL_PIN $GPIO_MODE_OUTPUT
    stm32_gpio_set_otype $MUC_SPI_SEL_PORT $MUC_SPI_SEL_PIN $GPIO_TYPE_PUSH_PULL
    stm32_gpio_set_pin   $MUC_SPI_SEL_PORT $MUC_SPI_SEL_PIN $GPIO_LOW
}
add_help_text hsb_disable_flash "Disable the SPI interface to the HSB SPI flash.  This must be done before the HSB can be powered up."

proc hsb_flash_erase { } {
    global HSB_SPI_FLASH_SZ
    global HSB_SPI_FLASH_SECTOR_SZ

    hsb_flash_enable
    flash erase_sector 1 0 [expr (($HSB_SPI_FLASH_SZ/$HSB_SPI_FLASH_SECTOR_SZ)-1)]
    hsb_flash_disable
}
proc hsb_flash_read {filename} {
    global HSB_SPI_FLASH_SZ

    hsb_flash_enable
    flash read_bank 1 $filename 0 $HSB_SPI_FLASH_SZ
    hsb_flash_disable
}
add_usage_text hsb_flash_read "<filename>"
add_help_text  hsb_flash_read "Read the contents of the HSB SPI flash into the filename provided.  This will power down the HSB and leave it powered off.  To power the HSB back up use the hsb_pwr_on function."

proc hsb_flash_program {filename} {
    global HSB_SPI_FLASH_SZ
    global HSB_SPI_FLASH_SECTOR_SZ

    hsb_flash_enable
    flash erase_sector 1 0 [expr (($HSB_SPI_FLASH_SZ/$HSB_SPI_FLASH_SECTOR_SZ)-1)]
    flash write_bank 1 $filename 0
    hsb_flash_disable
}
add_usage_text hsb_flash_program "<filename>"
add_help_text  hsb_flash_program "Erase and program the provided file into the HSB SPI flash.  This will power down the HSB and leave it powered off.  To power the HSB  back up use the hsb_pwr_on function."
